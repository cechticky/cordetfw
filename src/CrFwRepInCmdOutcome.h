/**
 * @file
 * @ingroup crOpenIfGroup
 * Interface for reporting the outcome of an InCommand.
 * The processing of an InCommand can have one of the following outcomes:
 * - Acceptance Failure: the command has failed its Acceptance Check
 * - Acceptance Success: the command has been accepted
 * - Start Failure: the Start Action of the command has failed
 * - Start Success: the Start Action of the command has been successful
 * - Progress Failure: the Progress Action of the command has failed
 * - Progress Success: the Progress Action of the command has been successful
 * - Termination Failure: the Termination Action of the command has failed
 * - Termination Success: the Termination Action of the command has been successful
 * .
 * The command outcome is reported either by the InLoader or by the InCommand itself.
 * This interface declares functions through which these components can report the
 * outcome of an InCommand.
 *
 * The InCommand outcome report generated by the functions declared in this file
 * is defined by the following attributes:
 * - The outcome type: a positive integer which identifies the type of
 *   outcome.
 * - The instance identifier: the instance identifier of the InCommand whose
 *   outcome is being reported.
 * - The service type: the service type of the InCommand whose
 *   outcome is being reported.
 * - The service sub-type: the service sub-type of the InCommand whose
 *   outcome is being reported.
 * - The discriminant: the discriminant of the InCommand whose
 *   outcome is being reported.
 * - The failure code: an integer parameter which identifies the type of failure
 *   (only applicable for 'failed' outcomes).
 * - The InCommand component representing the command whose outcome is being reported.
 * .
 * In general, the implementation of this interface is entirely application-specific
 * but a simple default implementation is provided in <code>CrFwInCmdOutcome.c</code>.
 * This default implementation is primarily intended for testing and demonstration
 * purposes.
 *
 * @author Vaclav Cechticky <vaclav.cechticky@pnp-software.com>
 * @author Alessandro Pasetti <pasetti@pnp-software.com>
 * @copyright P&P Software GmbH, 2013, All Rights Reserved
 *
 * This file is part of CORDET Framework.
 *
 * CORDET Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CORDET Framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with CORDET Framework.  If not, see <http://www.gnu.org/licenses/>.
 *
 * For information on alternative licensing, please contact P&P Software GmbH.
 */

#ifndef CRFW_REPINCMDOUTCOME_H_
#define CRFW_REPINCMDOUTCOME_H_

/* Include Framework Files */
#include "CrFwConstants.h"
/* Include Configuration Files */
#include "CrFwUserConstants.h"

/** Enumerated type for outcome types */
typedef enum {
	/** Acceptance failure */
	crCmdAckAccFail = 1,
	/** Acceptance success */
	crCmdAckAccSucc = 2,
	/** Start failure */
	crCmdAckStrFail = 3,
	/** Start success */
	crCmdAckStrSucc = 4,
	/** Progress failure */
	crCmdAckPrgFail = 5,
	/** Progress success */
	crCmdAckPrgSucc = 6,
	/** Termination failure */
	crCmdAckTrmFail = 7,
	/** Termination success */
	crCmdAckTrmSucc = 8
} CrFwRepInCmdOutcome_t;

/**
 * Report the outcome of an InCommand.
 * The last parameter of this function is the InCommand whose outcome is being reported.
 * This is a pointer variable. The owner of the pointer is the caller of the function.
 * The function can use it in read-only mode to access the values of command parameters.
 * If, at the time the function is called, the InCommand component has not yet been built,
 * the value of this parameter should be set to NULL.
 *
 * @param outcome the InCommand outcome
 * @param instanceId the instance identifier of the InCommand
 * @param servType the service type of the InCommand
 * @param servSubType the service sub-type of the InCommand
 * @param disc the discriminant of the InCommand
 * @param failCode the failure code (don't care in case of a "successful" outcome)
 * @param inCmd the InCommand component whose outcome is being reported or NULL if the InCommand
 * component does not exist
 */
void CrFwRepInCmdOutcome(CrFwRepInCmdOutcome_t outcome, CrFwInstanceId_t instanceId, CrFwServType_t servType,
                         CrFwServSubType_t servSubType, CrFwDiscriminant_t disc, CrFwOutcome_t failCode, FwSmDesc_t inCmd);

#endif /* CRFW_REPINCMDOUTCOME_H_ */
