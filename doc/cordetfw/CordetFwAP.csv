Category,Id,AP,DefValue,C2Cat,C2Id,C2Impl
BAS,1,Initialization Check in Initialization Procedure of Base Component,Always returns: 'check successful',0,0,"The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component."
BAS,2,Initialization Action in Initialization Procedure of Base Component,Do nothing and return: 'action successful',0,0,"The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component."
BAS,3,Configuration Check in Reset Procedure of Base Component,Always returns: 'check successful',0,0,"The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component."
BAS,4,Configuration Action in Reset Procedure of Base Component,Do nothing and return: 'action successful',0,0,"The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component."
BAS,5,Shutdown Action of Base Component,Do nothing,0,0,"The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component."
BAS,6,Execution Procedure of Base Component,Do the same dummy action (return without doing anything) whenever the procedure is executed,0,0,"The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component."
0,0,Identifier of Host Application,0,C2-CST,1,\texttt{\#DEFINE} constant in \texttt{CrFwUserConstants.h}
0,0,"Range of Service Type, Sub-Type and Discriminants for InCommands and InReports",0,C2-CST,2,\texttt{\#DEFINE} constants in \texttt{CrFwUserConstants.h}
AST,1,Application Start-Up Procedure,No default provided at framework level,C2-AST,1,Implementation of \texttt{CrFwAppStartUpProc.h}. Only a test stub is provided as default at framework level.
AST,2,Application Reset Procedure,No default provided at framework level,C2-AST,2,Implementation of \texttt{CrFwAppResetProc.h}. Only a test stub is provided as default at framework level.
AST,3,Application Shutdown Procedure,No default provided at framework level,C2-AST,3,Implementation of \texttt{CrFwAppShutdownProc.h}. Only a test stub is provided as default at framework level.
AST,4,State Machine Embedded in state START\_UP of Application State Machine,No state machine embedded in state START\_UP,C2-AST,4,\texttt{\#DEFINE} constant in \texttt{CrFwAppSmUserPar.h}
AST,5,State Machine Embedded in state NORMAL of Application State Machine,No state machine embedded in state NORMAL,C2-AST,5,\texttt{\#DEFINE} constant in \texttt{CrFwAppSmUserPar.h}
AST,6,State Machine Embedded in state RESET of Application State Machine,No state machine embedded in state RESET,C2-AST,6,\texttt{\#DEFINE} constant in \texttt{CrFwAppSmUserPar.h}
AST,7,State Machine Embedded in state SHUTDOWN of Application State Machine,No state machine embedded in state SHUTDOWN,C2-AST,7,\texttt{\#DEFINE} constant in \texttt{CrFwAppSmUserPar.h}
FAC,1,\texttt{Make} Operation to dynamically instantiate a component,No default provided at framework level,0,0,The only components which can be instantiated dynamically are report and command components. Their \texttt{make} operations are implemented in full (see \texttt{CrFwInFactoryMake*} and \texttt{CrFwOutFactoryMakeOutCmp} functions). This adaptation point is therefore closed by the C2 Implementation.
FAC,2,\texttt{Release} Operation to dynamically release a component,No default provided at framework level,0,0,The only components which can be released  dynamically are report and command components. Their \texttt{release} operations are implemented in full (see \texttt{CrFwInFactoryRelease*} and \texttt{CrFwOutFactoryReleaseOutCmp} functions). This adaptation point is therefore closed by the C2 Implementation.
0,0,Operations to Set and Get the Values of Command and Report Attributes in a Packet,0,C2-PCK,1,Implementation of \texttt{CrFwPckt.h}. Only a test stub is provided as default at framework level.
0,0,Operations to Report Errors Values of Command and Report Attributes in a Packet,0,C2-ERR,1,Implementation of \texttt{CrFwRepErr.h}. Only a test stub is provided as default at framework level.
0,0,OutFactory Capacity ,0,C2-OFA,1,\texttt{\#DEFINE} constant in \texttt{CrFwOutFactoryUserPar.h} defines maximum number of OutComponents which can be allocated by the factory.
0,0,OutComponent Kinds ,0,C2-OFA,2,"\texttt{\#DEFINE} constants in \texttt{CrFwOutFactoryUserPar.h} define the kinds of OutComponents supported by the application. An OutComponent kind is defined through its service type, command or report sub-type, and discriminant value. For each supported OutComponent kind, function pointers are defined implementing the OutComponent checks and actions. "
0,0,InFactory Capacity for InReports,0,C2-IFA,1,\texttt{\#DEFINE} constant in \texttt{CrFwInFactoryUserPar.h} defines maximum number of InReports which can be allocated by the factory.
0,0,InFactory Capacity for InCommands,0,C2-IFA,2,\texttt{\#DEFINE} constant in \texttt{CrFwInFactoryUserPar.h} defines maximum number of InCommands which can be allocated by the factory.
0,0,InReport Kinds ,0,C2-IFA,3,"\texttt{\#DEFINE} constants in \texttt{CrFwInFactoryUserPar.h} define the kinds of InReports supported by the application. An InReport kind is defined through its service type, command or report sub-type, and discriminant value. For each supported InReport kind, function pointers are defined implementing the InReport checks and actions."
0,0,InCommand Kinds ,0,C2-IFA,4,"\texttt{\#DEFINE} constants in \texttt{CrFwInFactoryUserPar.h} define the kinds of InCommands supported by the application. An InCommand kind is defined through its service type, command or report sub-type, and discriminant value. For each supported InCommand kind, function pointers are defined implementing the InCommand checks and actions."
0,0,Number of OutStreams in the Application,0,C2-OST,1,\texttt{\#DEFINE} constant in \texttt{CrFwOutStreamUserPar.h}
OST,1,Packet Queue Size for OutStream,No value defined at framework level,C2-OST,2,\texttt{\#DEFINE} constant (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}
0,0,Destination associated to OutStream,0,C2-OST,3,\texttt{\#DEFINE} constant (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}
OST,2,Initialization Check in Initialization Procedure of OutStream,Returns 'check successful' if the size of the Packet Queue has been set to a positive integer,C2-OST,4,Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwOutStream.h}..
OST,3,Initialization Action in Initialization Procedure of OutStream,Allocate resources for Packet Queue and return 'Action Successful' iff the allocation succeeds,C2-OST,5,Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwOutStream.h}..
OST,4,Configuration Check in Initialization Procedure of OutStream,Same value as in Base Component,C2-OST,4,Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwOutStream.h}..
OST,5,Configuration Action in Reset Procedure of OutStream,Reset the Packet Queue and return 'Action Successful',C2-OST,6,Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwOutStream.h}..
OST,6,Shutdown Action of OutStream,Reset the Packet Queue,C2-OST,7,Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwOutStream.h}..
OST,7,Execution Procedure of OutStream (closes BAS-6),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
OST,8,Packet Hand-Over Operation of OutStream,No value defined at framework level,C2-OST,8,Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Only a test stub is provided as default at framework level.
OST,9,Operation to set Sequence Counter in Outgoing Packets,No value defined at framework level,0,0,Implemented by Adaptation Point C2-PCK-1.
OST,12,Operation to Report Packet Queue Full,Generate OUTSTREAM\_PQ\_FULL Error Report,0,0,Implemented by Adaptation Point C2-ERR-1.
0,0,Number of InStreams in the Application,0,C2-IST,1,\texttt{\#DEFINE} constant in \texttt{CrFwInStreamUserPar.h}
IST,1,Size of the Packet Queue in InStream,Default size is 1,C2-IST,2,\texttt{\#DEFINE} constant (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}
0,0,Source associated to InStream,0,C2-IST,3,\texttt{\#DEFINE} constant (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}
IST,2,Initialization Check in Initialization Procedure of InStream,Returns 'check successful' if the size of the Packet Queue has been set to a positive integer,C2-IST,4,Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Default implementation is provided in \texttt{CrFwInStream.h}.
IST,3,Initialization Action in Initialization Procedure of InStream,Allocate resources for Packet Queue and return 'Action Successful' iff the allocation succeeds,C2-IST,5,Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Default implementation is provided in \texttt{CrFwInStream.h}.
IST,4,Configuration Action in Reset Procedure of InStream,Reset the Packet Queue and return 'Action Successful',C2-IST,6,Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Default implementation is provided in \texttt{CrFwInStream.h}.
IST,5,Shutdown Action of InStream,Reset the Packet Queue,C2-IST,7,Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Default implementation is provided in \texttt{CrFwInStream.h}.
IST,6,Execution Procedure of InStream (closes BAS-6),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
IST,7,Operation to Get Packet Source from Incoming Packet,No value defined at framework level,0,0,Implemented by Adaptation Point C2-PCK-1.
IST,8,Operation to Get Packet Sequence Counter from Incoming Packet,No value defined at framework level,0,0,Implemented by Adaptation Point C2-PCK-1.
IST,9,Operation to Report Sequence Counter Error,Generate INSTREAM\_SC\_ERR Error Report with expected and actual sequence counter values,0,0,Implemented by Adaptation Point C2-ERR-1.
IST,10,Operation to Report Packet Queue Full,Generate INSTREAM\_PQ\_FULL Error Report ,0,0,Implemented by Adaptation Point C2-ERR-1.
IST,11,Packet Collect Operation for InStream,No default defined at framework level,C2-IST,8,Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Only a test stub is provided as default at framework level.
IST,12,Packet Available Check Operation for InStream,No default defined at framework level,C2-IST,9,Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Only a test stub is provided as default at framework level.
OSR,1,Initialization Check in Initialization Procedure of OutStreamRegistry,Same value as in Base Component,0,0,"In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation."
OSR,2,Initialization Action in Initialization Procedure of OutStreamRegistry,Same value as in Base Component,0,0,"In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation."
OSR,3,Configuration Check in  Reset Procedure of OutStreamRegistry,Returns 'check successful' if the information to set up the link between the packet destinations and the OutStreams is available.,0,0,"In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation."
OSR,4,Configuration Action in Reset Procedure of OutStreamRegistry,Set up and configure the link between the packet destinations and the OutStreams.,0,0,"In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation."
OSR,5,Shutdown Action  of OutStreamRegistry (closes BAS-5),Same value as in Base Component,0,0,"In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation."
OSR,6,Execution Procedure of OutStreamRegistry (closes BAS-6),Same value as in Base Component,0,0,"In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation."
OSR,7,Get OutStream Operation of OutStreamRegistry,No default provided at framework level,C2-OST,10,\texttt{\#DEFINE} constants (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h} define the destination associated to each OutStream.
OCM,1,Initialization Check in Initialization Procedure of OutComponent,Same value as in Base Component,0,0,OutComponents are provided by the OutFactory in the CONFIGURED state and cannot therefore be initialized and configured by the user. This adaptation point is closed in the C2 Implementation.
OCM,2,Initialization Action in Initialization Procedure of OutComponent,Same value as in Base Component,0,0,OutComponents are provided by the OutFactory in the CONFIGURED state and cannot therefore be initialized and configured by the user. This adaptation point is closed in the C2 Implementation.
OCM,3,Configuration Check in Reset Procedure of OutComponent,Same value as in Base Component,0,0,OutComponents are provided by the OutFactory in the CONFIGURED state and cannot therefore be initialized and configured by the user. This adaptation point is closed in the C2 Implementation.
OCM,4,Configuration Action in Reset Procedure of OutComponent,Same value as in Base Component,0,0,OutComponents are provided by the OutFactory in the CONFIGURED state and cannot therefore be initialized and configured by the user. This adaptation point is closed in the C2 Implementation.
OCM,5,Shutdown Action in Base Component of OutComponent,Same value as in Base Component,0,0,OutComponents are provided by the OutFactory in the CONFIGURED state and are not intended to be ever shut down. This adaptation point is closed in the C2 Implementation.
OCM,6,Execution Procedure of OutComponent (closes BAS-6),Same value as in Base Component,0,0,The OutComponents are not intended to be ever executed. This adaptation point is closed in the C2 Implementation.
OCM,7,Service Type Attribute of OutComponent,No default provided at framework level,0,0,This Adaptation Point is implemented by adaptation point OFA-2.
OCM,8,Command/Report Sub-Type Attribute of OutComponent,No default provided at framework level,0,0,This Adaptation Point is implemented by adaptation point OFA-2.
OCM,9,Destination Attribute of OutComponent,No default provided at framework level,0,0,This Adaptation Point is implemented by adaptation point OFA-2.
OCM,10,Acknowledge Level Attribute of OutComponent,Default value is: 'no acknowledge required' (only relevant for OutCommands),0,0,This Adaptation Point is implemented by adaptation point C2-PCK-1.
OCM,11,Discriminant Attribute of OutComponent,Default value is: 'no discriminant',0,0,This Adaptation Point is implemented by adaptation point OFA-2.
OCM,12,Parameter Attribute of OutComponent,Default value is: 'no parameters',0,0,This Adaptation Point is implemented indirectly: applications must extend OutComponents and must define the range of parameters for each OutComponent and the operations to set their values. 
OCM,13,Enable Check Operation of OutComponent,Query the OutRegistry for the enable status of the command or report encapsulated in the OutComponent and set value of isEnable accordingly,C2-OCM,1,\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.
OCM,14,Ready Check Operation of OutComponent,Set value of isReady flag to true,C2-OCM,2,\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.
OCM,15,Repeat Check Operation of OutComponent,Return “No Repeat”,C2-OCM,3,\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.
OCM,16,Update Action of OutComponent,Set Time Stamp of OutComponent to current time,C2-OCM,4,\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.
OCM,17,Serialize Operation of OutComponent,No default defined at framework level,C2-OCM,5,\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.
OCM,18,Operation to Report Invalid Destination of an OutComponent,Generate SNDPCKT\_INV\_DEST Error Report with invalid destination as a parameter,0,0,Implemented by Adaptation Point C2-ERR-1.
OLD,1,Initialization Check in Initialization Procedure of OutLoader,Returns 'check successful' if the size of the LOM (List of OutManagers) has been set to a positive integer value.,C2-OLD,1,Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which always returns 'check successful' is provided in \texttt{CrFwOutLoader.h}.
OLD,2,Initialization Action in Initialization Procedure  of OutLoader,Allocate resources for LOM and return 'Action Successful' iff the allocation succeeds,C2-OLD,2,Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which takes no action is provided in \texttt{CrFwOutLoader.h}.
OLD,3,Configuration Check in Reset Procedure of OutLoader,Returns 'check successful' iff all the information is available to update (or initialize) the value of the LOM.,C2-OLD,3,Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which always returns 'check successful' is provided in \texttt{CrFwOutLoader.h}.
OLD,4,Configuration Action in Reset Procedure of OutLoader,Update (or initialize) the LOM and return 'Action Successful',C2-OLD,4,Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which takes no action is provided in \texttt{CrFwOutLoader.h}.
OLD,5,Shutdown Action of OutLoader,Same as in Base Component.,C2-OLD,5,Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which takes no action is provided in \texttt{CrFwOutLoader.h}.
OLD,6,Execution Procedure of OutLoader (closes BAS-6),Same as in Base Component.,0,0,This Adaptation Point is closed at framework level.
OLD,7,OutManager Selection Operation,Select the first OutManager in the LOM,C2-OLD,6,Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which always returns the first OutManager in the LOM is provided in \texttt{CrFwOutLoader.h}.
OLD,8,OutManager Activation Operation,Do nothing,C2-OLD,7,Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which takes no action is provided in \texttt{CrFwOutLoader.h}.
OLD,9,Operation to set Set Time-Stamp in Outgoing Packets,No value defined at framework level,0,0,Implemented by Adaptation Point C2-PCK-1.
0,0,Number of OutManagers in Application,0,C2-OMG,1,\texttt{\#DEFINE} constants in \texttt{CrFwOutManagerUserPar.h}
OMG,1,Size of POCL of OutManager,Default size is 1.,C2-OMG,2,\texttt{\#DEFINE} constants (one for each OutManager) in \texttt{CrFwOutManagerUserPar.h}
OMG,2,Initialization Check in Initialization Procedure of OutManager (closes BAS-1),Returns 'check successful' if the size of the POCL has been set to a positive integer value.,0,0,This Adaptation Point is closed at framework level.
OMG,3,Initialization Action in Initialization Procedure of OutManager (closes BAS-2),Allocate resources for POCL and return 'Action Successful' iff the allocation succeeds,0,0,This Adaptation Point is closed at framework level.
OMG,4,Configuration Check in Reset Procedure of OutManager (closes BAS-3),Same as in Base Component,0,0,This Adaptation Point is closed at framework level.
OMG,5,Configuration Action in Reset Procedure  (closes BAS-4),Release all OutComponents in the POCL; reset the POCL; reset the counter of successfully loaded OutComponents; and return 'Action Successful',0,0,This Adaptation Point is closed at framework level.
OMG,6,Shutdown Action in Base Component of OutManager (closes BAS-5),Release all OutComponents in the POCL; reset the POCL,0,0,This Adaptation Point is closed at framework level.
OMG,7,Execution Procedure in Base Component of OutManager (closes BAS-6),Implemented as procedure of Manager Execution Procedure,0,0,This Adaptation Point is closed at framework level.
OMG,8,Operation to Report POCL of OutManager Full,Generate OUTMANAGER\_POCL\_FULL Error Report,0,0,Implemented by Adaptation Point C2-ERR-1.
ORG,1,Maximum Number of Trackable Commands/Reports for OutRegistry,Default value is 1.,C2-ORG,1,"\texttt{\#DEFINE} constant in \texttt{CrFwOutRegistryUserPar.h} defines types, sub-types and range of discriminant values supported by application."
0,0,Number of Service Types/Sub-Types supported by Application,0,C2-ORG,2,"\texttt{\#DEFINE} constant in \texttt{CrFwOutRegistryUserPar.h} defines types, sub-types and range of discriminant values supported by application."
0,0,Range of Services supported by Application,0,C2-ORG,3,"\texttt{\#DEFINE} constant in \texttt{CrFwOutRegistryUserPar.h} defines types, sub-types and range of discriminant values supported by application."
ORG,2,Initialization Check in Initialization Procedure of OutRegistry (closes BAS-1),Returns 'check successful' if the maximum number of trackable commands/reports has been set to a positive integer value.,0,0,This Adaptation Point is closed at framework level.
ORG,3,Initialization Action in Initialization Procedure of OutRegistry (closes BAS-2),Allocate the resources for tracking the commands and reports and returns: 'action successful' if the allocation succeeds or 'action failed' if the allocation fails.,0,0,This Adaptation Point is closed at framework level.
ORG,4,Configuration Check in Reset Procedure of OutRegistry (closes BAS-3),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
ORG,5,Configuration Action in Reset Procedure of OutRegistry (closes BAS-4),Set the enable state for all kinds of commands and reports to: 'enabled'; clear all information about tracked commands and reports; and return: 'action successful'.,0,0,This Adaptation Point is closed at framework level.
ORG,6,Shutdown Action of OutRegistry (closes BAS-5),Set the enable state for all kinds of commands and reports to: 'enabled'; clear all information about tracked commands and reports.,0,0,This Adaptation Point is closed at framework level.
ORG,7,Execution Procedure of OutRegistry (closes BAS-6),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
0,0,Operations to Report the Outcome of the Processing and Execution of an Incoming Command,0,C2-PCK,1,Implementation of \texttt{CrFwRepInCmdOutcome.h}. Only a test stub is provided as default at framework level.
ILD,1,Initialization Check in Initialization Procedure of InLoader (closes BAS-1),Return “check successful' iff the sizes of the LIM is a positive integer,0,0,This Adaptation Point is closed at framework level.
ILD,2,Initialization Action in Initialization Procedure of InLoader (closes BAS-2),Allocate resources for the LIM and return “Action Successful' iff the allocation succeeds,0,0,This Adaptation Point is closed at framework level.
ILD,3,Configuration Check in Reset Procedure of InLoader (closes BAS-3),Returns “check successful' if: (a) the information to update (or initialize) the content of the LIM is valid; and (b) the information to re-route packets is valid.,0,0,This Adaptation Point is closed at framework level.
ILD,4,Configuration Action in Reset Procedure of InLoader (closes BAS-4),(a) update (or initialize) content of LIM; and (b) update (or initialize) packet re-routing information.,0,0,This Adaptation Point is closed at framework level.
ILD,5,Shutdown Action of InLoader (closes BAS-5),Same as in Base Component.,0,0,This Adaptation Point is closed at framework level.
ILD,6,Execution Procedure of InLoader (closes BAS-6),Implemented as InLoader Execution Procedure.,0,0,This Adaptation Point is closed at framework level.
ILD,7,Size of List of InManagers in InLoader,Default size is 2.,0,0,The InLoader of the C2 Implementation does not explicitly define a List of InManager. This Adaptation Point is subsumed in the Adaptation Point for the selection of InManager (C2-ILD-TBD)
ILD,8,Content of List of InManagers in InLoader,No default provided at framework level.,0,0,The InLoader of the C2 Implementation does not explicitly define a List of InManager. It only defines the function to return the InManager where the InReport or InCommand must be loaded (see C2-ILD-2).
ILD,9,Operation to Determine Re-Routing Destination of Packets,Re0routing destination is set to the destination of the incoming packet.,C2-ILD,1,Function pointer in \texttt{CrFwInLoaderUserPar.h}. Default implementation is provided \texttt{CrFwInLoader.h}.
ILD,10,Operation to Get Packet Destination,No default provided at framework level.,0,0,Implemented by Adaptation Point C2-PCK-1.
ILD,11,Operation to Check Packet Destination Validity,Always returns “destination is valid'.,0,0,The check of the destination validity is performed by the function which returns the re-routing destination.
ILD,12,Operation to Report Packet Destination Invalid ,Generate error report INLOADER\_INV\_DEST with the destination identifier as a parameter,0,0,Implemented by Adaptation Point C2-ERR-1.
ILD,13,Operation to Get Packet Type,No default provided at framework level,0,0,Implemented by Adaptation Point C2-PCK-1.
ILD,14,Operation to Report Acceptance Failure,For InCommands: generate command acknowledge report CMD\_ACK\_ACC\_FAIL with command's identifier and with identifier of reason of failure as parameters.. For InReports: generate error report INLOADER\_ACC\_FAIL with report's identifier and with identifier of reason of acceptance failure as parameters.,0,0,Implemented by Adaptation Point C2-ACK-1.
ILD,15,Operation to Report Acceptance Success,Generate command acknowledge report CMD\_ACK\_ACC\_SUCC with command's identifier as parameter.,0,0,Implemented by Adaptation Point C2-ACK-1.
ILD,16,Operation to Deserialize Packet,No default provided at framework level.,0,0,"Packets are not deserialized in the C2 Implementation. Instead, the packet itself is attached to the component encapsulating the incoming report or command. This adaptation point is closed in the C2 Implementation."
ILD,17,Operation to Select InManager where Incoming Report or Command is Loaded,"For InCommands, select first InManager in LIM; for InReport, select second InManager in LIM.",C2-ILD,1,Function pointer in \texttt{CrFwInLoaderUserPar.h}. Default implementation is provided \texttt{CrFwInLoader.h}.
ILD,18,Operation to Check Packet Type Validity,No default provided at framework level,0,0,This check is implemented in function \textit{CrFwInFactoryMakeInCmd} for incoming command and in function \textit{CrFwInFactoryMakeInRep} for incoming report. These functions check that the type is supported by the application.
ICM,1,Initialization Check in Initialization Procedure of InCommand,Returns “check successful' if information for initializing InCommand using data in incoming packet is valid,0,0,This Adaptation Point is closed in the C2 Implementation because InCommands are provided by the InFactory in the CONFIGURED state  (but a validity check is provided in C2-ICM-1 to implement the acceptance check).
ICM,2,Initialization Action in Initialization Procedure of InCommand,Use information in incoming packet to initialize InCommand and return “action successful' ,0,0,This Adaptation Point is closed in the C2 Implementation because InCommands are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).
ICM,3,Configuration Check in Reset Procedure of InCommand,Returns “check successful' if information for configuring InCommand using data in incoming packet is valid,0,0,This Adaptation Point is closed in the C2 Implementation because InCommands are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).
ICM,4,Configuration Action in Reset Procedure of InCommand,Use information in incoming packet to configure InCommand and return “action successful' ,0,0,This Adaptation Point is closed in the C2 Implementation because InCommands are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).
0,0,Validity Check for InCommand,0,C2-ICM,1,Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function \texttt{CrFwPrCheckAlwaysTrue}.
ICM,5,Shutdown Action of InCommand (closes BAS-5),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
ICM,6,Execution Procedure of InCommand (closes BAS-6),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
ICM,7,Ready Check of InCommand,Return “command is ready',C2-ICM,2,Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function \texttt{CrFwSmCheckAlwaysTrue}.
ICM,8,Start Action of InCommand,Set action outcome to “success',C2-ICM,3,Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function \texttt{CrFwSmEmptyAction}.
ICM,9,Progress Action of InCommand,Set action outcome to “completed',C2-ICM,4,Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function \texttt{CrFwSmEmptyAction}.
ICM,10,Termination Action of InCommand,Set action outcome to “success',C2-ICM,5,Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function \texttt{CrFwSmEmptyAction}.
ICM,11,Abort Action of InCommand,Do nothing,C2-ICM,6,Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function \texttt{CrFwSmEmptyAction}.
ICM,12,Operation to Report Start Failed for InCommand,Generate command acknowledge report CMD\_ACK\_STR\_FAIL with command's identifier and with identifier of reason of failure as parameters.,0,0,Implemented by Adaptation Point C2-ACK-1.
ICM,13,Operation to Report Start Successful for InCommand,Generate command acknowledge report CMD\_ACK\_STR\_SUCC with command's identifier as parameter.,0,0,Implemented by Adaptation Point C2-ACK-1.
ICM,14,Operation to Report Progress Failed for InCommand,"Generate command acknowledge report CMD\_ACK\_PRG\_FAIL with command's identifier, progress step and with identifier of reason of failure as parameters.",0,0,Implemented by Adaptation Point C2-ACK-1.
ICM,15,Operation to Report Progress Successful for InCommand,Generate command acknowledge report CMD\_ACK\_PRG\_SUCC with command's identifier and progress step as parameters.,0,0,Implemented by Adaptation Point C2-ACK-1.
ICM,16,Operation to Report Termination Failed for InCommand,Generate command acknowledge report CMD\_ACK\_TRM\_FAIL with command's identifier and with identifier of reason of failure as parameters.,0,0,Implemented by Adaptation Point C2-ACK-1.
ICM,17,Operation to Report Report Termination Successful for InCommand,Generate command acknowledge report CMD\_ACK\_TRM\_FAIL with command's identifier as parameter.,0,0,Implemented by Adaptation Point C2-ACK-1.
ICM,18,Service Type Attribute of InCommand,No default provided at framework level,0,0,Implemented by Adaptation Point C2-IFA-4.
ICM,19,Command Sub-Type Attribute of InCommand,No default provided at framework level,0,0,Implemented by Adaptation Point C2-IFA-4.
ICM,20,Discriminant Attribute of InCommand,Default value is: “no discriminant',0,0,Implemented by Adaptation Point C2-IFA-4.
ICM,21,Parameter Attributes of InCommand,Default value is: “no parameters',0,0,This Adaptation Point is implemented indirectly: applications must extend InCommands and must define the range of parameters for each kind of InCommand and the operations to get their values. 
IRP,1,Initialization Check in Initialization Procedure of InReport,Returns “check successful' if information for initializing InReport using data in incoming packet is valid,0,0,This Adaptation Point is closed by the C2 Implementation because InReports are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).
IRP,2,Initialization Action in Initialization Procedure of InReport,Use information in incoming packet to initialize InReport and return “action successful' ,0,0,This Adaptation Point is closed by the C2 Implementation because InReports are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).
IRP,3,Configuration Check in Reset Procedure of InReport,Returns “check successful' if information for configuring InReport using data in incoming packet is valid,0,0,This Adaptation Point is closed by the C2 Implementation because InReports are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).
IRP,4,Configuration Action in Reset Procedure of InReport,Use information in incoming packet to configure InReport and return “action successful' ,0,0,This Adaptation Point is closed by the C2 Implementation because InReports are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).
0,0,Validity Check for InReport,0,C2-IRP,1,Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided at framework level.
IRP,5,Shutdown Action of InReport (closes BAS-5),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
IRP,6,Execution Procedure of InReport (closes BAS-6),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
IRP,7,Update Action of InReport,Do nothing,C2-IRP,2,Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided at framework level.
IRP,8,Service Type Attribute of InReport,No default provided at framework level,0,0,Implemented by Adaptation Point C2-IFA-3.
IRP,9,Sub-Type Attribute of InReport,No default provided at framework level,0,0,Implemented by Adaptation Point C2-IFA-3.
IRP,10,Discriminant Attribute of InReport,Default value is: “no discriminant',0,0,Implemented by Adaptation Point C2-IFA-3.
IRP,11,Parameter Attribute of InReport,Default value is: “no parameters',0,0,This Adaptation Point is implemented indirectly: applications must extend InCommands and must define the range of parameters for each kind of InCommand and the operations to get their values. 
0,0,Number of InManagers in Application,0,C2-IMG,1,\texttt{\#DEFINE} constants in \texttt{CrFwInManagerUserPar.h}
IMG,1,Size of PCRL of InManager,Default size is 1.,C2-IMG,2,\texttt{\#DEFINE} constants (one for each InManager) in \texttt{CrFwInManagerUserPar.h}
IMG,2,Initialization Check in Initialization Procedure of InManager (closes BAS-1),Returns “check successful' if the size of the PCRL has been set to a positive integer value.,0,0,This Adaptation Point is closed at framework level.
IMG,3,Initialization Action in Initialization Procedure of InManager (closes BAS-2),Allocate resources for PCRL and return “Action Successful' iff the allocation succeeds,0,0,This Adaptation Point is closed at framework level.
IMG,4,Configuration Check in Reset Procedure of InManager (closes BAS-3),Same as in Base Component,0,0,This Adaptation Point is closed at framework level.
IMG,5,Configuration Action in Reset Procedure of InManager (closes BAS-4),Release all InCommands and InReports in the PCRL; reset the counter of successfully loaded InCommands and InReports; reset the PCRL; and return “Action Successful',0,0,This Adaptation Point is closed at framework level.
IMG,6,Shutdown Action of InManager (closes BAS-5),Release all InCommands and InReports in the PCRL; reset the PCRL;,0,0,This Adaptation Point is closed at framework level.
IMG,7,Execution Procedure of InManager (closes BAS-6),Implemented as InManager Execution Procedure.,0,0,This Adaptation Point is closed at framework level.
IMG,8,Operation to Report PCRL of InManager Full,Generate INMANAGER\_PCRL\_FULL Error Report,0,0,Implemented by Adaptation Point C2-ERR-1.
IRG,1,Maximum Number of Trackable InCommands/InReports in InRegistry,Default value is 1.,C2-IRG,1,\texttt{\#DEFINE} constant in \texttt{CrFwInRegistryUserPar.h}
IRG,2,Initialization Check in Initialization Procedure of InRegistry (closes BAS-1),Returns “check successful' if the maximum number of trackable InCommands/InReports has been set to a positive integer value.,0,0,This Adaptation Point is closed at framework level.
IRG,3,Initialization Action in Initialization Procedure of InRegistry (closes BAS-2),Allocate the resources for tracking the commands and reports and returns: “action successful' if the allocation succeeds or “action failed' if the allocation fails.,0,0,This Adaptation Point is closed at framework level.
IRG,4,Configuration Check in Reset Procedure of InRegistry (closes BAS-3),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
IRG,5,Configuration Action in Reset Procedure  (closes BAS-4),Clear all information about tracked InCommands and InReports; return: “action successful'.,0,0,This Adaptation Point is closed at framework level.
IRG,6,Shutdown Action of InRegistry (closes BAS-5),Clear all information about tracked InCommands and InReports.,0,0,This Adaptation Point is closed at framework level.
IRG,7,Execution Procedure of InRegistry (closes BAS-6),Same value as in Base Component,0,0,This Adaptation Point is closed at framework level.
0,0,Operations to Get the Current Time,0,C2-TIM,1,Implementation of \texttt{CrFwTime.h}. Only a test stub is provided as default at framework level.
0,0,Definition of Primitive Types,0,C2-TYP,1,Definition of \texttt{typedef}.values in \texttt{CrFwUserConstants.h}. Default values are pre-defined in this header file.
0,0,Identifier of Host Application,0,C2-CST,1,\texttt{\#DEFINE} constant in \texttt{CrFwUserConstants.h}.
