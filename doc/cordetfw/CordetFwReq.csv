Category,Type,Id,Text,Implementation,Verification
BAS,S,1,All components provided by the CORDET Framework shall implement the behaviour of the Base State Machine of figure \ref{fig:BaseSM}.,The behaviour of the Base State Machine is implemented in \texttt{CrFwBaseCmp}. Each framework component is built around a state machine instance which is derived from the Base State Machine (see section 5 of reference \cite{ref:C2Implementation}). State machine derivation is done using the extension mechanism of the C1 Implementation of the FW Profile (see \cite{ref:C2Implementation}) which guarantees that the derived state machines have the same behaviour as the base state machine. Framework component are instantiated by Make functions (see section 6.1 of reference \cite{ref:C2Implementation}). The creation of their state machine as an extension of the Base State Machine is done in these Make functions.,The behaviour of the Base State Machine is verified in table \ref{tab:verBaseSM}. The behaviour of its two procedures (Initialization Procedure and Reset Procedure) is verified in table \ref{tab:verInitProc} and \ref{tab:verResetProc}). The inheritance of this behaviour by all other framework state machines is guaranteed by the extension mechanism of the FW Profile as it is implemented in the C1 Implementation and by the fact that all framework components are created as extension of a Base State Machine.
BAS,S,2,"The CORDET Framework shall implement an API through which applications can query a CORDET Component for its current state (including, if applicable, its current sub-state).","Only two levels of state machine embedding are used in the C2 Implementation. Query of the outer state (which is a state of the Base State Machine) is provided by functions: \texttt{CrFwCmpIsInCreated}, \texttt{CrFwCmpIsInInitialized} and \texttt{CrFwCmpIsInConfigured}. Embedded states are only embedded in state CONFIGURED and query of this embedded state is provided by functions with names like \texttt{CrFw$\langle$Type$\rangle$IsIn$\langle$State$\rangle$($\langle$Inst$\rangle$)}.",The state query functions are guaranteed to be verified because the Test Suite has 100\% statement coverage.
BAS,C,3,All components provided by application developers shall implement the behaviour of the Base State Machine. ,,
AST,S,1,The CORDET Framework shall implement the Application State Machine of figure \ref{fig:ApplicationSM}.,The Application State Machine is implemented in \texttt{CrFwAppSm}. ,The behaviour of the Application State Machine is verified in table \ref{tab:verAppSM}. 
AST,A,2,The Application State Machine shall support the adaptation points AST-*.,,
AST,S,3,The CORDET Framework shall provide an API through which applications can query the Application State Machine for its current state.,"This API is provided by functions \texttt{CrFwAppSmIsInStartUp}, \texttt{CrFwAppSmIsInNormal},  \texttt{CrFwAppSmIsInReset} and  \texttt{CrFwAppSmIsInShutdown}.",The state query functions are guaranteed to be verified because the Test Suite has 100\% statement coverage.
AST,C,4,"The Application Start-Up Procedure shall include the instantiation, initialization and configuration of all components subject to early instantiation.",,
AST,C,5,The application Start-Up Procedure shall only terminate if all components subject to early instantiation are in state CONFIGURED.,,
AST,C,6,The Application Reset Procedure shall include the sending of command \texttt{Reset} to all application components.,,
AST,C,7,The Application Reset Procedure shall only terminate if all application components are in state CONFIGURED.,,
AST,C,8,The Application Shutdown Procedure shall include the sending of command \texttt{Shutdown} to all application components.,,
FAC,S,1,The factory components shall be provided as extensions of the Base Component.,"The InFactory component is created by function \texttt{CrFwInFactoryMake} which creates it as an extension of the Base State Machine. Similarly, OutFactory component is created by function \texttt{CrFwOutFactoryMake} which creates it as an extension of the Base State Machine. ",InFactory creation is verified in the test cases in \texttt{CrFwInFactoryTestCase.h} and OutFactory creation is verified in the test cases in \texttt{CrFwOutFactoryTestCase.h}.
FAC,S,2,The factory components shall define an API offering two operations: \texttt{Make} and \texttt{Release}.,The make operations for the InFactory are implemented in functions \texttt{CrFwInFactorMakeInCmd} and \texttt{CrFwInFactorMakeInRep}. The release operations are implemented in functions \texttt{CrFwInFactorReleaseInCmd} and \texttt{CrFwInFactorReleaseInRep}. The make operation for the OutFactory is implemented in function \texttt{CrFwOutFactorMakeOutCmp}. The release operation is implemented in function \texttt{CrFwOutFactorReleaseOutCmp}. ,The make operation for InCommands is verified in test case \texttt{CrFwInCmdTestCase1}. The make operation for InReports is verified in test case \texttt{CrFwInRepTestCase1}. The make operation for OutComponents is verified in test case \texttt{CrFwOutCmpTestCase1}. 
FAC,S,3,The \texttt{Make} operation shall either fail and return nothing or succeed and return a component instance of the type specified by the \texttt{Make} arguments.,The make operations for the InFactory are implemented in functions \texttt{CrFwInFactorMakeInCmd} and \texttt{CrFwInFactorMakeInRep}. The make operation for the OutFactory is implemented in function \texttt{CrFwOutFactorMakeOutCmp}. ,"For the InFactory, successful creation is verified in \texttt{CrFwInFactoryTestCase1}; unsuccessful creation is verified in \texttt{CrFwInFactoryTestCase2} and \texttt{CrFwInFactoryTestCase5}. For the OutFactory, successful creation is verified in \texttt{CrFwOutFactoryTestCase1}; unsuccessful creation is verified in \texttt{CrFwOutFactoryTestCase2}. "
FAC,S,4,The \texttt{Release} operation shall take as argument the component instance to be released.,The release operations for the InFactory are implemented in functions \texttt{CrFwInFactorReleaseInCmd} and \texttt{CrFwInFactorReleaseInRep}. The release operation for the OutFactory is implemented in function \texttt{CrFwOutFactorReleaseOutCmp}. ,The release functions are guaranteed to be verified because the Test Suite has 100\% statement coverage.
FAC,A,5,The factory components shall support the adaptation points FAC-*.,,
FAC,C,6,An application shall instantiate factory components only once.,,
FAC,C,7,An application shall not use a component instance which has been released through a call to operation \texttt{Release}.,,
OST,S,1,The CORDET Framework shall provide an OutStream component as an extension of the Base Component.,The OutStream component is created by function \texttt{CrFwOutStreamMake} which creates it as an extension of the Base State Machine. ,OutStream creation is verified in the test cases in \texttt{CrFwOutStreamTestCase.h}.
OST,S,2,The behaviour of the OutStream component in state CONFIGURED shall be as defined by the \textit{OutStream State Machine} of figure \ref{fig:OutStream}.,The function \texttt{CrFwOutStreamMake} builds an instance of an OutStream by first extending a Base State Machine and then embedding within its CONFIGURED state an OutStream State Machine.,The behaviour of the OutStream State Machine is verified in table \ref{tab:verOutStreamSM}.
OST,P,3,The OutStream shall guarantee the OutStream Properties P1 to P4.,,
OST,S,4,The Packet Queue in the OutStream shall be managed as a FIFO queue.,The packet queue of the OutStream uses the implementation of module \texttt{CrFwPcktQueue}.  Module.,FIFO order management of packets in packet queues is verified in \texttt{CrFwPacketQueueTestCase1}.
OST,A,5,The OutStream component shall support the adaptation points OST-*.,,
OST,S,6,The OutStream shall provide visibility over the state of its Packet Queue (number of packets in the queue and number of empty slots still available).,The number of pending packet is provided by function \texttt{CrFwOutStreamGetNOfPendingPckts} and the queue size is provided by function \texttt{CrFwOutStreamGetPcktQueueSize}.,The functions to check the number of pending packets and the size of the Packet Queue are verified in \texttt{CrFwOutStreamTestCase1} and  \texttt{CrFwOutStreamTestCase3}.
OST,C,7,The OutStream shall be used with a middleware which satisfies the Middleware Assumptions A1 to A5.,,
OST,C,8,An application shall instantiate one OutStream for each destination (either a destination for internally generated packets or for re-routed packets) to which packets may be sent.,,
OST,C,9,"If an application sends internally generated packets to a certain destination D and also re-routes packets to the same destination D, then it shall use the same OutStream for both kinds of packets.",,
OST,C,10,All out-going commands and reports originating from an application and belonging to the same group shall be routed through the same OutStream,,
OST,C,11,An OutStream shall only enter state CONFIGURED when its middleware connection has become AVAILABLE.,,
IST,S,1,The CORDET Framework shall provide an InStream component as an extension of the Base Component.,The InStream component is created by function \texttt{CrFwInStreamMake} which creates it as an extension of the Base State Machine. ,InStream creation is verified in the test cases in \texttt{CrFwOutStreamTestCase.h}.
IST,S,2,The behaviour of the InStream component in state CONFIGURED shall be as defined by the \textit{InStream State Machine} of figure \ref{fig:InStream} and by the \textit{Packet Collect Procedure} of figure \ref{fig:PacketCollect}.,The function \texttt{CrFwInStreamMake} builds an instance of an InStream by first extending a Base State Machine and then embedding within its CONFIGURED state an InStream State Machine. The Packet Collect Procedure is implemented in function \texttt{DoActionB} in \texttt{CrFwInStream.h}.,The behaviour of the InStream State Machine is verified in table \ref{tab:verInStreamSM}. The behaviour of the Packet Collect Procedure is verified in table \ref{tab:verPcktCollectProc}
IST,S,3,The Packet Queue in the InStream shall be managed as a FIFO queue.,The packet queue of the InStream uses the implementation of module \texttt{CrFwPcktQueue}.  Module.,FIFO order management of packets in packet queues is verified in \texttt{CrFwPacketQueueTestCase1}.
IST,A,4,The InStream component shall support the adaptation points IST-*.,,
IST,S,5,The InStream shall provide visibility over the state of its Packet Queue (number of packets in the queue and number of empty slots still available).,The number of pending packet is provided by function \texttt{CrFwInStreamGetNOfPendingPckts} and the queue size is provided by function \texttt{CrFwInStreamGetPcktQueueSize}.,The function to check the number of pending items is verified in \texttt{CrFwInStreamTestCase3}; the function to verify the size of the packet queue is verified in \texttt{CrFwInStreamTestCase4}.
IST,C,6,The InStream shall be used with a middleware which satisfies the Middleware Assumptions B1 to B5.,,
IST,C,7,A packet source shall be attached to only one InStream component.,,
IST,C,8,All incoming commands and reports with application A as their final destination and belonging to the same group shall be routed through the same InStream,,
IST,C,9,An InStream shall only enter state CONFIGURED when its middleware connection has terminated its initialization and is either in state WAITING or PCKT\_AVAIL.,,
OSR,S,1,The CORDET Framework shall provide an OutStreamRegistry component as an extension of the Base Component.,The OutStreamRegistry function is implemented in the OutStream itself (in function \texttt{CrFwOutStreamGet}).,The \texttt{CrFwOutStreamGet}) function is verified in test case \texttt{CrFwInStreamTestCase4}.
OSR,A,2,TheOutStreamRegistry Component shall support the adaptation points OSR-*.,,
OSR,S,3,The OutStreamRegistry component shall define an API offering one operation: \texttt{OutStreamGet}.,The OutStreamGet operation is implemented by function \texttt{CrFwOutStreamGet}.,The \texttt{CrFwOutStreamGet}) function is verified in test case \texttt{CrFwInStreamTestCase4}.
OSR,S,4,"The \texttt{OutStreamGet} operation shall either fail and return nothing, or succeed and return the OutStream component associated to the command or report destination specified in its argument.",The OutStreamGet operation is implemented by function \texttt{CrFwOutStreamGet}.,Both kinds of return values for the \texttt{CrFwOutStreamGet}) function are verified in test case \texttt{CrFwInStreamTestCase4}.
OSR,S,5,The encoding of the command or report destination passed in a call the \texttt{OutStreamGet} operation shall be the same as the encoding of the destination attribute of commands and reports.,The argument of \texttt{CrFwOutStreamGet} is of type \texttt{CrFwDestSrc\_t} and this is the same type as used for a report or command destination in function \texttt{CrFwPcktSetDest}.,The \texttt{CrFwOutStreamGet}) function is verified in test case \texttt{CrFwInStreamTestCase4}.
OSR,C,6,An application shall instantiate the OutStreamRegistry component only once.,,
OCM,S,1,The CORDET Framework shall provide an OutComponent component as an extension of the Base Component.,The OutComponent components are created by function \texttt{CrFwOutFactoryMakeOutCmp} which returns an instance taken from a pool of pre-allocated components. The pre-allocated components are created by function \texttt{OutFactoryInitAction} as extensions of a Base OutComponent which is created by function \texttt{CrFwOutCmpMakeBase} and which is itself an extension of a Base State Machine.,The function \texttt{CrFwOutFactoryMakeOutCmp} is verified in test cases \texttt{CrFwOutCmpTestCase1} to \texttt{CrFwOutCmpTestCase6}. 
OCM,S,2,The behaviour of the OutComponent in state CONFIGURED shall be as defined by the OutComponent State Machine of figure \ref{fig:OutComponent}.,The function \texttt{CrFwOutCmpMakeBase} builds the Base OutComponent from which all OutComponents are derived by extending the Base State Machine and then embedding within its CONFIGURED state an OutComponent State Machine.,The behaviour of the OutComponent State Machine is verified in table \ref{tab:verOutComponentSM}.
OCM,A,3,The OutComponent State Machine shall support the adaptation points OCM-*.,,
OCM,S,4,The OutComponent component shall provide access to the attributes of the command or report instance that the OutComponent encapsulates.,The command or report attributes can be accessed through functions with names like: \texttt{CrFwOutCmpGet*}.,The getter functions for the command and report attributes are verified in test case \texttt{CrFwOutCmpTestCase1}.
OFT,S,1,The OutFactory component shall encapsulate the instance creation process for OutComponent components.,Instances of OutComponents are created by function \texttt{CrFwOutFactoryMakeOutCmp}.,Function  \texttt{CrFwOutFactoryMakeOutCmp} is verified in test case \texttt{CrFwOutFactoryTestCase4}.
OFT,S,2,"The \texttt{Make} operation of the OutFactory component shall take as arguments the service type, command or report sub-type and discriminant value of the command or report to be encapsulated by the OutComponent.",Instances of OutComponents are created by function \texttt{CrFwOutFactoryMakeOutCmp}.,Function  \texttt{CrFwOutFactoryMakeOutCmp} is verified in test case \texttt{CrFwOutFactoryTestCase4}.
OFT,S,3,"The OutComponents returned by the \texttt{Make} operation of the OutFactory shall have their service type, command/report sub-type, and discriminant attribute set in accordance with the value of the arguments of the \texttt{Make} operation.",Instances of OutComponents are created by function \texttt{CrFwOutFactoryMakeOutCmp}.,"The correctness of the type, sub-type and discriminant of a newly created OutComponent is verified in test case \texttt{ CrFwOutCmpTestCase1}."
OFT,S,4,The OutComponents returned by the \texttt{Make} operation of the OutFactory shall have their identifier attribute set to represent the number of components successfully created by the factory since it was initialized.,Instances of OutComponents are created by function \texttt{CrFwOutFactoryMakeOutCmp}.,The correctness of the instance identifier of a newly created OutComponent is verified in test case \texttt{ CrFwOutCmpTestCase1}.
OLD,S,1,The CORDET Framework shall provide an OutLoader component as an extension of the Base Component.,The OutLoader component is created by function \texttt{CrFwOutLoaderMake} which creates it as an extension of the Base State Machine. ,OutLoader creation is verified in the test cases in \texttt{CrFwOutLoaderTestCase.h}.
OLD,A,2,The OutLoader component shall support the adaptation points OLD-*.,,
OLD,S,3,The OutLoader component shall offer a \texttt{Load} operation to load an OutComponent instance into an OutManager.,The Load operation is implemented by function \texttt{CrFwOutLoaderLoad}.,Function \texttt{CrFwOutLoaderLoad} is verified in test case \texttt{CrFwOutLoaderTestCase1}.
OLD,S,4,Execution of the \texttt{Load} operation shall cause the \textit{Load Procedure} of figure \ref{fig:OutLoaderLoad} to be run.,The Load operation is implemented by function \texttt{CrFwOutLoaderLoad}.,The Load Procedure has one single branch which is tested in \texttt{CrFwOutLoaderTestCase1}.
OLD,C,5,An application shall instantiate an OutLoader component only once.,,
OMG,S,1,The CORDET Framework shall provide an OutManager component as an extension of the Base Component.,The OutManager component is created by function \texttt{CrFwOutManagerMake} which creates it as an extension of the Base State Machine. ,OutLoader creation is verified in the test cases in \texttt{CrFwOutManagerTestCase.h}.
OMG,A,2,The OutManager component shall support the Adaptation Points OMG-*.,,
OMG,S,3,The OutManager component shall offer a \texttt{Load} operation to load an OutComponent instance in the POCL.,The Load operation is implemented by function \texttt{CrFwOutManagerLoad}.,Function  \texttt{CrFwOutManagerLoad} is verified in test case \texttt{CrFwOutManagerTestCase2}.
OMG,S,4,The \texttt{Load} operation shall run the OutManager Load Procedure of figure \ref{fig:OutManagerLoad}.,The OutManager Load Procedure is implemented by function \texttt{CrFwOutManagerLoad}.,The Load Procedure has two branches both of which are verified in test case \texttt{CrFwOutManagerTestCase2}. The 'POCL Full' branch is also verified in test cases \texttt{CrFwOutManagerTestCase3} and \texttt{CrFwOutManagerTestCase4}.
OMG,C,5,An application shall ensure that the OutComponent components loaded in an OutManager through the OutLoader are in state CONFIGURED.,,
ORG,S,1,The CORDET Framework shall provide an OutRegistry component as an extension of the Base Component.,The OutRegistry component is created by function \texttt{CrFwOutRegistryMake} which creates it as an extension of the Base State Machine. ,OutRegistry creation is verified in the test cases in \texttt{CrFwOutManagerTestCase.h}.
ORG,A,2,The OutRegistry component shall support the adaptation points ORG-*.,,
ORG,S,3,The OutRegistry shall offer a \texttt{StartTracking} operation to run the Registry Start Tracking Procedure of figure \ref{fig:RegistryStartTrackingAndUpdate}.,The StartTracking operation is implemented in function \texttt{CrFwOutRegistryStartTracking}.,The Registry Start Tracking Procedure has two branches both of which are verified in test case \texttt{CrFwOutRegistryTestCase7}.
ORG,S,4,The OutRegistry shall offer an \texttt{Update} operation to run the Registry Update Procedure of figure \ref{fig:RegistryStartTrackingAndUpdate}.,The Update operation is implemented in function \texttt{CrFwOutRegistryStartTracking}.,The Registry Update Procedure has two branches both of which are verified in test case \texttt{CrFwOutRegistryTestCase7}.
ORG,S,5,"The OutRegistry component shall provide an API through which the state of a command or report in the repository (PENDING, ABORTED, and TERMINATED) can be queried.",The query operation is implemented in function \texttt{CrFwOutRegistryGetState}.,"The query function is verified in test cases \texttt{CrFwOutRegistryTestCase7} to \texttt{CrFwOutRegistryTestCase9}. All possible outcomes of the query function (PENDING, NOT\_TRACKED, ABORTED and TERMINATED) are verified."
ORG,S,6,"The OutRegistry component shall provide an API through which the enable state of a service type, service sub-type or discriminant value can be set and read.",The set operation is implemented in function \texttt{CrFwOutRegistrySetEnable}. The get operation is implemented in function \texttt{CrFwOutRegistryIsEnabled}.,Functions \texttt{CrFwOutRegistrySetEnable} and  \texttt{CrFwOutRegistryIsEnabled} are verified in test cases \texttt{CrFwOutRegistryTestCase3} to \texttt{CrFwOutRegistryTestCase6}.
ORG,S,7,The OutRegistry component shall provide an API through which the enable state of a specific out-going command or report can be determined in accordance with the logic of the Enable State Determination Procedure  of figure \ref{fig:EnableStateDetermination}. ,The logic to determine the enable state of an OutComponent is implemented in function \texttt{CrFwOutRegistryIsEnabled}.,The behaviour of the Enable State Determination Procedure e is verified in table \ref{tab:verEnableStateDeterminationProc}.
ORG,S,8,The OutRegistry shall use the command/report identifier attribute as the key to store and make available information about commands and reports.,The argument of function \texttt{CrFwOutRegistryGetState} is the command or report identifier.,The query function is verified in test cases \texttt{CrFwOutRegistryTestCase7} to \texttt{CrFwOutRegistryTestCase9}. 
ORG,C,9,An application shall instantiate the OutRegistry component only once.,,
IFT,S,1,The InFactory component shall encapsulate the instance creation process for InCommand and InReport components.,Instances of InCommand are created by function \texttt{CrFwInFactoryMakeInCmd}. Instances of InReport are created by function \texttt{CrFwInFactoryMakeInRep}. ,Function  \texttt{CrFwInFactoryMakeInCmd} is verified in test case \texttt{CrFwInCmdTestCase1}. Function  \texttt{CrFwInFactoryMakeInRep} is verified in test case \texttt{CrFwInRepTestCase1}.
IFT,S,2,"The \texttt{Make} operation of the InFactory component shall take as arguments the service type, command or report sub-type and discriminant value of the command or report to be encapsulated by the InCommand or InReport.",Instances of InCommand are created by function \texttt{CrFwInFactoryMakeInCmd}. Instances of InReport are created by function \texttt{CrFwInFactoryMakeInRep}. ,Function  \texttt{CrFwInFactoryMakeInCmd} is verified in test case \texttt{CrFwInCmdTestCase1}. Function  \texttt{CrFwInFactoryMakeInRep} is verified in test case \texttt{CrFwInRepTestCase1}.
IFT,S,3,"The InCommands or InReports returned by the \texttt{Make} operation of the OutFactory shall have their service type, command/report sub-type, and discriminant attribute set in accordance with the value of the arguments of the Make operation.",Instances of InCommand are created by function \texttt{CrFwInFactoryMakeInCmd}. Instances of InReport are created by function \texttt{CrFwInFactoryMakeInRep}. ,"The correctness of the type, sub-type and discriminant of a newly created InCommand is verified in test case \texttt{ CrFwInCmdTestCase1}. The correctness of the type, sub-type and discriminant of a newly created InReport is verified in test case \texttt{ CrFwInRepTestCase1}."
ILD,S,1,The CORDET Framework shall provide an InLoader component as an extension of the Base Component.,The InLoader component is created by function \texttt{CrFwInLoaderMake} which creates it as an extension of the Base State Machine. ,InLoader creation is verified in the test cases in \texttt{CrFwInLoaderTestCase.h}.
ILD,A,2,The InLoader component shall support the adaptation points ILD-*.,,
ILD,S,3,The InLoader component shall offer a \texttt{Load} operation to load a command or report in an InManager.,The Load operation is implemented by function \texttt{CrFwInLoaderLoad}.,Function \texttt{CrFwInLoaderLoad} is verified in test cases \texttt{CrFwInLoaderTestCase3} to \texttt{CrFwInLoaderTestCase11}.
ILD,S,4,The \texttt{Load} operation shall run the InLoader Execution Procedure of figure \ref{fig:InLoaderExecution}.,The InLoader Execution Procedure is implemented by function \texttt{InLoaderExecAction}.,The behaviour of the InLoader Execution Procedure is verified in table \ref{tab:verInLoaderExecProc}. This procedure uses the InLoader Load Command/Report Procedure which is verified in table \ref{tab:verInLoaderLoadCmdRepProc}.
ILD,C,5,An application shall instantiate an InLoader component only once.,,
ICM,S,1,The CORDET Framework shall provide an InCommand component as an extension of the Base Component to encapsulate an incoming command in a provider application. ,The InCommand components are created by function \texttt{CrFwInFactoryMakeInCmd} which returns an instance taken from a pool of pre-allocated components. The pre-allocated components are created by function \texttt{InFactoryInitAction} as extensions of a Base InCommand which is created by function \texttt{CrFwInCmdMakeBase} and which is itself an extension of a Base State Machine.,The function \texttt{CrFwInFactoryMakeInCmd} is verified in test case \texttt{CrFwInCmdTestCase1}.
ICM,S,2,The behaviour of the InCommand component in state CONFIGURED shall be as defined by the InCommand State Machine of figure \ref{fig:InCommand}.,The function \texttt{CrFwInCmdMakeBase} builds the Base InCommand from which all InCommands are derived by extending the Base State Machine and then embedding within its CONFIGURED state an InCommand State Machine.,The behaviour of the InCommand State Machine is verified in table \ref{tab:verInCmdSM}.
ICM,A,3,The InCommand component shall support the adaptation points ICM-*.,,
ICM,S,4,The InCommand component shall provide visibility over the value of all the attributes of the command it encapsulates.,The InCommand attributes can be accessed through functions with names like: \texttt{CrFwInCmdGet*}.,The \texttt{CrFwInCmdGet*} functions are verified in test case \texttt{CrFwInCmdTestCase1}.
IRP,S,1,The CORDET Framework shall provide an InReport component as an extension of the Base Component to encapsulate an incoming report in a user application. ,The InReport components are created by function \texttt{CrFwInFactoryMakeInRep} which returns an instance taken from a pool of pre-allocated components. The pre-allocated components are created by function \texttt{InFactoryInitAction} as extensions of a Base InCommand which is created by function \texttt{CrFwInRepMakeBase} and which is itself an extension of a Base State Machine.,The function \texttt{CrFwInFactoryMakeInRep} is verified in test case \texttt{CrFwInRepTestCase1}.
IRP,A,2,The InReport component shall support the adaptation points IRP-*.,,
IRP,S,3,The InReport component shall provide visibility over the value of all the attributes of the report it encapsulates.,The InReport attributes can be accessed through functions with names like: \texttt{CrFwInRepGet*}.,The \texttt{CrFwInRepGet*} functions are verified in test case \texttt{CrFwInRepTestCase1}.
IMG,S,1,The CORDET Framework shall provide an InManager component as an extension of the Base Component.,The InManager component is created by function \texttt{CrFwInManagerMake} which creates it as an extension of the Base State Machine. ,InManager creation is verified in the test cases in \texttt{CrFwInManagerTestCase.h}.
IMG,A,2,The InManager component shall support the adaptation points IMG-*.,,
IMG,S,3,The InManager component shall offer a \texttt{Load} operation to load an InCommand or InReport instance in the Pending Command/Report List (PCRL).,The Load operation is implemented by function \texttt{CrFwInManagerLoad}.,Function  \texttt{CrFwInManagerLoad} is verified in test case \texttt{CrFwInManagerTestCase2}.
IMG,S,4,The Load operation shall run the InManager Load Procedure of figure \ref{fig:InManagerLoad}.,The OutManager Load Procedure is implemented by function \texttt{CrFwOutManagerLoad}.,The Load Procedure has two branches both of which are verified in test case \texttt{CrFwInManagerTestCase2}. The 'PCRL Not Full' branch is also verified in test cases \texttt{CrFwOutManagerTestCase3} to \texttt{CrFwOutManagerTestCase8}.
IRG,S,1,The CORDET Framework shall provide an InRegistry component as an extension of the Base Component .,The InRegistry component is created by function \texttt{CrFwInRegistryMake} which creates it as an extension of the Base State Machine. ,InRegistry creation is verified in the test cases in \texttt{CrFwInRegistryTestCase.h}.
IRG,A,2,The InRegistry component shall support the adaptation points IRG-*.,,
IRG,S,3,The InRegistry shall offer an operation StartTracking to run the Registry Start Tracking Procedure of figure \ref{fig:RegistryStartTrackingAndUpdate}.,The StartTracking operation is implemented in function \texttt{CrFwInRegistryStartTracking}.,The Registry Start Tracking Procedure has two branches both of which are verified in test case \texttt{CrFwInRegistryTestCase2}.
IRG,S,4,The InRegistry shall offer an Update operation which runs the Registry Update Procedure of figure \ref{fig:RegistryStartTrackingAndUpdate}.,The Update operation is implemented in function \texttt{CrFwInRegistryUpdateState}.,The Registry Update Procedure has two branches both of which are verified in test case \texttt{CrFwInRegistryTestCase2}.
IRG,S,5,"The InRegistry component shall provide an API through which the state of a command or report in the repository (PENDING, ABORTED, and TERMINATED) can be queried.",The query operation is implemented in function \texttt{CrFwInRegistryGetState}.,"The query function is verified in test case \texttt{CrFwOutRegistryTestCase2}. All possible outcomes of the query function (PENDING, NOT\_TRACKED, ABORTED and TERMINATED) are verified."
IRG,S,6,The InRegistry shall use the command/report identifier attribute as the key to store and make available information about commands and reports.,The argument of function \texttt{CrFwInRegistryGetState} is the command or report identifier.,The query function is verified in test case \texttt{CrFwInRegistryTestCase2}. 
IRG,C,7,An application shall instantiate the InRegistry component only once.,,
