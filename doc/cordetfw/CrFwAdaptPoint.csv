Domain|Name|Title|Implementation|DefaultValue|Remarks
AST|01|Application Start-Up Procedure|Implementation of \texttt{CrFwAppStartUpProc.h}. Only a test stub is provided as default at framework level.|No default provided at framework level|
AST|02|Application Reset Procedure|Implementation of \texttt{CrFwAppResetProc.h}. Only a test stub is provided as default at framework level.|No default provided at framework level|
AST|03|Application Shutdown Procedure|Implementation of \texttt{CrFwAppShutdownProc.h}. Only a test stub is provided as default at framework level.|No default provided at framework level|
AST|04|State Machine Embedded in state START\_UP of Application State Machine|\texttt{\#DEFINE} constant in \texttt{CrFwAppSmUserPar.h}|No state machine embedded in state START\_UP|
AST|05|State Machine Embedded in state NORMAL of Application State Machine|\texttt{\#DEFINE} constant in \texttt{CrFwAppSmUserPar.h}|No state machine embedded in state NORMAL|
AST|06|State Machine Embedded in state RESET of Application State Machine|\texttt{\#DEFINE} constant in \texttt{CrFwAppSmUserPar.h}|No state machine embedded in state RESET|
AST|07|State Machine Embedded in state SHUTDOWN of Application State Machine|\texttt{\#DEFINE} constant in \texttt{CrFwAppSmUserPar.h}|No state machine embedded in state SHUTDOWN|
BAS|01|Initialization Check in Initialization Procedure of Base Component|The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component.|Always returns: 'check successful'|
BAS|02|Initialization Action in Initialization Procedure of Base Component|The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component.|Do nothing and return: 'action successful'|
BAS|03|Configuration Check in Reset Procedure of Base Component|The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component.|Always returns: 'check successful'|
BAS|04|Configuration Action in Reset Procedure of Base Component|The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component.|Do nothing and return: 'action successful'|
BAS|05|Shutdown Action of Base Component|The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component.|Do nothing|
BAS|06|Execution Procedure of Base Component|The Base Component is not available for direct use by application developers. This Adaptation Point is therefore not directly supported by the C2 Implementation but, where required, is supported by components which are derived from the Base Component.|Do the same dummy action (return without doing anything) whenever the procedure is executed|
FAC|01|\texttt{Make} Operation to dynamically instantiate a component|The only components which can be instantiated dynamically are report and command components. Their \texttt{make} operations are implemented in full (see \texttt{CrFwInFactoryMake*} and \texttt{CrFwOutFactoryMakeOutCmp} functions). This adaptation point is therefore closed by the C2 Implementation.|No default provided at framework level|
FAC|02|\texttt{Release} Operation to dynamically release a component|The only components which can be released  dynamically are report and command components. Their \texttt{release} operations are implemented in full (see \texttt{CrFwInFactoryRelease*} and \texttt{CrFwOutFactoryReleaseOutCmp} functions). This adaptation point is therefore closed by the C2 Implementation.|No default provided at framework level|
ICM|01|Initialization Check in Initialization Procedure of InCommand|This Adaptation Point is closed in the C2 Implementation because InCommands are provided by the InFactory in the CONFIGURED state  (but a validity check is provided in C2-ICM-1 to implement the acceptance check).|Returns 'check successful' if information for initializing InCommand using data in incoming packet is valid|
ICM|02|Initialization Action in Initialization Procedure of InCommand|This Adaptation Point is closed in the C2 Implementation because InCommands are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).|Use information in incoming packet to initialize InCommand and return 'action successful'|
ICM|03|Configuration Check in Reset Procedure of InCommand|This Adaptation Point is closed in the C2 Implementation because InCommands are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).|Returns 'check successful' if information carried by packet is valid|
ICM|04|Configuration Action in Reset Procedure of InCommand|This Adaptation Point is closed in the C2 Implementation because InCommands are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).|Use information in incoming packet to configure InCommand and return 'action successful'|
ICM|05|Shutdown Action of InCommand (closes BAS-5)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
ICM|06|Execution Procedure of InCommand (closes BAS-6)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
ICM|07|Ready Check of InCommand|Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function }CrFwSmCheckAlwaysTrue}.|Return 'command is ready'|
ICM|08|Start Action of InCommand|Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function }CrFwSmEmptyAction}.|Set action outcome to 'success'|
ICM|09|Progress Action of InCommand|Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function }CrFwSmEmptyAction}.|Set action outcome to 'completed'|
ICM|10|Termination Action of InCommand|Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function \texttt{CrFwSmEmptyAction}.|Set action outcome to 'success'|
ICM|11|Abort Action of InCommand|Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided by function \texttt{CrFwSmEmptyAction}.|Do nothing|
ICM|12|Operation to Report Start Failed for InCommand|Implemented by Adaptation Point C2-ACK-1.|Generate command acknowledge report CMD\_ACK\_STR\_FAIL with command's identifier and with identifier of reason of failure as parameters.|
ICM|13|Operation to Report Start Successful for InCommand|Implemented by Adaptation Point C2-ACK-1.|Generate command acknowledge report CMD\_ACK\_STR\_SUCC with command's identifier as parameter.|
ICM|14|Operation to Report Progress Failed for InCommand|Implemented by Adaptation Point C2-ACK-1.|Generate command acknowledge report CMD\_ACK\_PRG\_FAIL with command's identifier, progress step and with identifier of reason of failure as parameters.|
ICM|15|Operation to Report Progress Successful for InCommand|Implemented by Adaptation Point C2-ACK-1.|Generate command acknowledge report CMD\_ACK\_PRG\_SUCC with command's identifier and progress step as parameters.|
ICM|16|Operation to Report Termination Failed for InCommand|Implemented by Adaptation Point C2-ACK-1.|Generate command acknowledge report CMD\_ACK\_TRM\_FAIL with command's identifier and with identifier of reason of failure as parameters.|
ICM|17|Operation to Report Report Termination Successful for InCommand|Implemented by Adaptation Point C2-ACK-1.|Generate command acknowledge report CMD\_ACK\_TRM\_FAIL with command's identifier as parameter.|
ICM|18|Service Type Attribute of InCommand|Implemented by Adaptation Point C2-IFA-4.|No default provided at framework level|
ICM|19|Command Sub-Type Attribute of InCommand|Implemented by Adaptation Point C2-IFA-4.|No default provided at framework level|
ICM|20|Discriminant Attribute of InCommand|Implemented by Adaptation Point C2-IFA-4.|Default value is: 'no discriminant'|
ICM|21|Parameter Attributes of InCommand|This Adaptation Point is implemented indirectly: applications must extend InCommands and must define the range of parameters for each kind of InCommand and the operations to get their values.|Default value is: 'no parameters'|
ILD|01|Initialization Check in Initialization Procedure of InLoader (closes BAS-1)|This Adaptation Point is closed at framework level.|Return 'check successful' iff the sizes of the LIM is a positive integer|
ILD|02|Initialization Action in Initialization Procedure of InLoader (closes BAS-2)|This Adaptation Point is closed at framework level.|Allocate resources for the LIM and return 'Action Successful' iff the allocation succeeds|
ILD|03|Configuration Check in Reset Procedure of InLoader (closes BAS-3)|This Adaptation Point is closed at framework level.|Returns 'check successful' if: (a) the information to update (or initialize) the content of the LIM is valid; and (b) the information to re-route packets is valid.|
ILD|04|Configuration Action in Reset Procedure of InLoader (closes BAS-4)|This Adaptation Point is closed at framework level.|(a) update (or initialize) content of LIM; and (b) update (or initialize) packet re-routing information.|
ILD|05|Shutdown Action of InLoader (closes BAS-5)|This Adaptation Point is closed at framework level.|Same as in Base Component.|
ILD|06|Execution Procedure of InLoader (closes BAS-6)|This Adaptation Point is closed at framework level.|Implemented as InLoader Execution Procedure.|
ILD|07|Size of List of InManagers in InLoader|The InLoader of the C2 Implementation does not explicitly define a List of InManager. This Adaptation Point is subsumed in the Adaptation Point for the selection of InManager (C2-ILD-TBD)|Default size is 2.|
ILD|08|Content of List of InManagers in InLoader|The InLoader of the C2 Implementation does not explicitly define a List of InManager. It only defines the function to return the InManager where the InReport or InCommand must be loaded (see C2-ILD-2).|No default provided at framework level.|
ILD|09|Operation to Determine Re-Routing Destination of Packets|Function pointer in \texttt{CrFwInLoaderUserPar.h}. Default implementation is provided \texttt{CrFwInLoader.h}.|Re0routing destination is set to the destination of the incoming packet.|
ILD|10|Operation to Get Packet Destination|Implemented by Adaptation Point C2-PCK-1.|No default provided at framework level.|
ILD|11|Operation to Check Packet Destination Validity|The check of the destination validity is performed by the function which returns the re-routing destination.|Always returns 'destination is valid'.|
ILD|12|Operation to Report Packet Destination Invalid|Implemented by Adaptation Point C2-ERR-1.|Generate error report INLOADER\_INV\_DEST with the destination identifier as a parameter|
ILD|13|Operation to Get Packet Type|Implemented by Adaptation Point C2-PCK-1.|No default provided at framework level|
ILD|14|Operation to Report Acceptance Failure|Implemented by Adaptation Point C2-ACK-1.|For InCommands: generate command acknowledge report CMD\_ACK\_ACC\_FAIL with command's identifier and with identifier of reason of failure as parameters.. For InReports: generate error report INLOADER\_ACC\_FAIL with report's identifier and with identifier of reason of acceptance failure as parameters.|
ILD|15|Operation to Report Acceptance Success|Implemented by Adaptation Point C2-ACK-1.|Generate command acknowledge report CMD\_ACK\_ACC\_SUCC with command's identifier as parameter.|
ILD|16|Operation to Deserialize Packet|Packets are not deserialized in the C2 Implementation. Instead, the packet itself is attached to the component encapsulating the incoming report or command. This adaptation point is closed in the C2 Implementation.|No default provided at framework level.|
ILD|17|Operation to Select InManager where Incoming Report or Command is Loaded|Function pointer in \texttt{CrFwInLoaderUserPar.h}. Default implementation is provided \texttt{CrFwInLoader.h}.|For InCommands, select first InManager in LIM; for InReport, select second InManager in LIM.|
ILD|18|Operation to Check Packet Type Validity|This check is implemented in function \texttt{CrFwInFactoryMakeInCmd} for incoming command and in function \texttt{CrFwInFactoryMakeInRep} for incoming report. These functions check that the type is supported by the application.|No default provided at framework level|
IMG|01|Size of PCRL of InManager|\texttt{\#DEFINE} constants (one for each InManager) in \texttt{CrFwInManagerUserPar.h}|Default size is 1.|
IMG|02|Initialization Check in Initialization Procedure of InManager (closes BAS-1)|This Adaptation Point is closed at framework level.|Returns 'check successful' if the size of the PCRL has been set to a positive integer value.|
IMG|03|Initialization Action in Initialization Procedure of InManager (closes BAS-2)|This Adaptation Point is closed at framework level.|Allocate resources for PCRL and return 'Action Successful' iff the allocation succeeds|
IMG|04|Configuration Check in Reset Procedure of InManager (closes BAS-3)|This Adaptation Point is closed at framework level.|Same as in Base Component|
IMG|05|Configuration Action in Reset Procedure of InManager (closes BAS-4)|This Adaptation Point is closed at framework level.|Release all InCommands and InReports in the PCRL; reset the counter of successfully loaded InCommands and InReports; reset the PCRL; and return 'Action Successful'|
IMG|06|Shutdown Action of InManager (closes BAS-5)|This Adaptation Point is closed at framework level.|Release all InCommands and InReports in the PCRL; reset the PCRL;|
IMG|07|Execution Procedure of InManager (closes BAS-6)|This Adaptation Point is closed at framework level.|Implemented as InManager Execution Procedure.|
IMG|08|Operation to Report PCRL of InManager Full|Implemented by Adaptation Point C2-ERR-1.|Generate INMANAGER\_PCRL\_FULL Error Report|
IRG|01|Maximum Number of Trackable InCommands/InReports in InRegistry|\texttt{\#DEFINE} constant in \texttt{CrFwInRegistryUserPar.h}|Default value is 1.|
IRG|02|Initialization Check in Initialization Procedure of InRegistry (closes BAS-1)|The maximum number of trackable InCommands/InReports is a statically defined configuration parameter of the framework. Hence, the check required by this requirement is performed by one of the Configuration Check Functions of requirement C2-BAS-01. This configuration check is therefore implemented to always return ?check successful?.|Returns 'check successful' if the maximum number of trackable InCommands/InReports has been set to a positive integer value.|
IRG|03|Initialization Action in Initialization Procedure of InRegistry (closes BAS-2)|This Adaptation Point is closed at framework level.|Allocate the resources for tracking the commands and reports and returns: 'action successful' if the allocation succeeds or 'action failed' if the allocation fails.|
IRG|04|Configuration Check in Reset Procedure of InRegistry (closes BAS-3)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
IRG|05|Configuration Action in Reset Procedure  (closes BAS-4)|This Adaptation Point is closed at framework level.|Clear all information about tracked InCommands and InReports; return: 'action successful'.|
IRG|06|Shutdown Action of InRegistry (closes BAS-5)|This Adaptation Point is closed at framework level.|Clear all information about tracked InCommands and InReports.|
IRG|07|Execution Procedure of InRegistry (closes BAS-6)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
IRP|01|Initialization Check in Initialization Procedure of InReport|This Adaptation Point is closed by the C2 Implementation because InReports are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).|Returns 'check successful' if information for initializing InReport using data in incoming packet is valid|
IRP|02|Initialization Action in Initialization Procedure of InReport|This Adaptation Point is closed by the C2 Implementation because InReports are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).|Use information in incoming packet to initialize InReport and return 'action successful'|
IRP|03|Configuration Check in Reset Procedure of InReport|This Adaptation Point is closed by the C2 Implementation because InReports are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).|Returns 'check successful' if information for configuring InReport using data in incoming packet is valid|
IRP|04|Configuration Action in Reset Procedure of InReport|This Adaptation Point is closed by the C2 Implementation because InReports are provided by the InFactory in the CONFIGURED state (but a validity check is provided in C2-ICM-1 to implement the acceptance check).|Use information in incoming packet to configure InReport and return 'action successful'|
IRP|05|Shutdown Action of InReport (closes BAS-5)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
IRP|06|Execution Procedure of InReport (closes BAS-6)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
IRP|07|Update Action of InReport|Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation is provided at framework level.|Do nothing|
IRP|08|Service Type Attribute of InReport|Implemented by Adaptation Point C2-IFA-3.|No default provided at framework level|
IRP|09|Sub-Type Attribute of InReport|Implemented by Adaptation Point C2-IFA-3.|No default provided at framework level|
IRP|10|Discriminant Attribute of InReport|Implemented by Adaptation Point C2-IFA-3.|Default value is: 'no discriminant'|
IRP|11|Parameter Attribute of InReport|This Adaptation Point is implemented indirectly: applications must extend InCommands and must define the range of parameters for each kind of InCommand and the operations to get their values.|Default value is: 'no parameters'|
IST|01|Size of the Packet Queue in InStream|\texttt{\#DEFINE} constant (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}|Default size is 1|
IST|02|Initialization Check in Initialization Procedure of InStream|Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Default implementation is provided in \texttt{CrFwInStream.h}. The size of the Packet Queue is a statically defined configuration parameter. The fact that it must be positive is checked by the one of the Configuration Check Functions of requirement C2-BAS-01.|Returns 'check successful' if the size of the Packet Queue has been set to a positive integer|
IST|03|Initialization Action in Initialization Procedure of InStream|Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Default implementation is provided in \texttt{CrFwInStream.h}.|Allocate resources for Packet Queue and return 'Action Successful' iff the allocation succeeds|
IST|04|Configuration Action in Reset Procedure of InStream|Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Default implementation is provided in \texttt{CrFwInStream.h}.|Reset the Packet Queue and return 'Action Successful'|
IST|05|Shutdown Action of InStream|Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Default implementation is provided in \texttt{CrFwInStream.h}.|Reset the Packet Queue|
IST|06|Execution Procedure of InStream (closes BAS-6)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
IST|07|Operation to Get Packet Source from Incoming Packet|Implemented by Adaptation Point C2-PCK-1.|No value defined at framework level|
IST|08|Operation to Get Packet Sequence Counter from Incoming Packet|Implemented by Adaptation Point C2-PCK-1.|No value defined at framework level|
IST|09|Operation to Report Sequence Counter Error|Implemented by Adaptation Point C2-ERR-1.|Generate INSTREAM\_SC\_ERR Error Report with expected and actual sequence counter values|
IST|10|Operation to Report Packet Queue Full|Implemented by Adaptation Point C2-ERR-1.|Generate INSTREAM\_PQ\_FULL Error Report|
IST|11|Packet Collect Operation for InStream|Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Only a test stub is provided as default at framework level.|No default defined at framework level|
IST|12|Packet Available Check Operation for InStream|Function pointers (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}. Only a test stub is provided as default at framework level.|No default defined at framework level|
OCM|01|Initialization Check in Initialization Procedure of OutComponent|OutComponents are provided by the OutFactory in the CONFIGURED state and cannot therefore be initialized and configured by the user. This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OCM|02|Initialization Action in Initialization Procedure of OutComponent|OutComponents are provided by the OutFactory in the CONFIGURED state and cannot therefore be initialized and configured by the user. This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OCM|03|Configuration Check in Reset Procedure of OutComponent|OutComponents are provided by the OutFactory in the CONFIGURED state and cannot therefore be initialized and configured by the user. This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OCM|04|Configuration Action in Reset Procedure of OutComponent|OutComponents are provided by the OutFactory in the CONFIGURED state and cannot therefore be initialized and configured by the user. This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OCM|05|Shutdown Action in Base Component of OutComponent|OutComponents are provided by the OutFactory in the CONFIGURED state and are not intended to be ever shut down. This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OCM|06|Execution Procedure of OutComponent (closes BAS-6)|The OutComponents are not intended to be ever executed. This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OCM|07|Service Type Attribute of OutComponent|This Adaptation Point is implemented by adaptation point OFA-2.|No default provided at framework level|
OCM|08|Command/Report Sub-Type Attribute of OutComponent|This Adaptation Point is implemented by adaptation point OFA-2.|No default provided at framework level|
OCM|09|Destination Attribute of OutComponent|This Adaptation Point is implemented by adaptation point OFA-2.|No default provided at framework level|
OCM|10|Acknowledge Level Attribute of OutComponent|This Adaptation Point is implemented by adaptation point C2-PCK-1.|Default value is: 'no acknowledge required' (only relevant for OutCommands)|
OCM|11|Discriminant Attribute of OutComponent|This Adaptation Point is implemented by adaptation point OFA-2.|Default value is: 'no discriminant'|
OCM|12|Parameter Attribute of OutComponent|This Adaptation Point is implemented indirectly: applications must extend OutComponents and must define the range of parameters for each OutComponent and the operations to set their values.|Default value is: 'no parameters'|
OCM|13|Enable Check Operation of OutComponent|\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.|Query the OutRegistry for the enable status of the command or report encapsulated in the OutComponent and set value of isEnable accordingly|
OCM|14|Ready Check Operation of OutComponent|\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.|Set value of isReady flag to true|
OCM|15|Repeat Check Operation of OutComponent|\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.|Return `No Repeat`|
OCM|16|Update Action of OutComponent|\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.|Set Time Stamp of OutComponent to current time|
OCM|17|Serialize Operation of OutComponent|\texttt{\#DEFINE} constants (one for each kind of OutComponent in the application) in \texttt{CrFwOutFactoryUserPar.h} define the pointer to the function implementing the operation. A default is provided a framework level.|No default defined at framework level|
OCM|18|Operation to Report Invalid Destination of an OutComponent|Implemented by Adaptation Point C2-ERR-1.|Generate SNDPCKT\_INV\_DEST Error Report with invalid destination as a parameter|
OLD|01|Initialization Check in Initialization Procedure of OutLoader|Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which always returns 'check successful' is provided in \texttt{CrFwOutLoader.h}.|Returns 'check successful' if the size of the LOM (List of OutManagers) has been set to a positive integer value.|
OLD|02|Initialization Action in Initialization Procedure  of OutLoader|Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which takes no action is provided in \texttt{CrFwOutLoader.h}.|Allocate resources for LOM and return 'Action Successful' iff the allocation succeeds|
OLD|03|Configuration Check in Reset Procedure of OutLoader|Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which always returns 'check successful' is provided in \texttt{CrFwOutLoader.h}.|Returns 'check successful' iff all the information is available to update (or initialize) the value of the LOM.|
OLD|04|Configuration Action in Reset Procedure of OutLoader|Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which takes no action is provided in \texttt{CrFwOutLoader.h}.|Update (or initialize) the LOM and return 'Action Successful'|
OLD|05|Shutdown Action of OutLoader|Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which takes no action is provided in \texttt{CrFwOutLoader.h}.|Same as in Base Component.|
OLD|06|Execution Procedure of OutLoader (closes BAS-6)|This Adaptation Point is closed at framework level.|Same as in Base Component.|
OLD|07|OutManager Selection Operation|Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which always returns the first OutManager in the LOM is provided in \texttt{CrFwOutLoader.h}.|Select the first OutManager in the LOM|
OLD|08|OutManager Activation Operation|Function pointer in \texttt{CrFwOutLoaderUserPar.h}. Default implementation which takes no action is provided in \texttt{CrFwOutLoader.h}.|Do nothing|
OLD|09|Operation to set Set Time-Stamp in Outgoing Packets|Implemented by Adaptation Point C2-PCK-1.|No value defined at framework level|
OMG|01|Size of POCL of OutManager|\texttt{\#DEFINE} constants (one for each OutManager) in \texttt{CrFwOutManagerUserPar.h}|Default size is 1.|
OMG|02|Initialization Check in Initialization Procedure of OutManager (closes BAS-1)|This Adaptation Point is closed at framework level.|Returns 'check successful' if the size of the POCL has been set to a positive integer value.|
OMG|03|Initialization Action in Initialization Procedure of OutManager (closes BAS-2)|This Adaptation Point is closed at framework level.|Allocate resources for POCL and return 'Action Successful' iff the allocation succeeds|
OMG|04|Configuration Check in Reset Procedure of OutManager (closes BAS-3)|This Adaptation Point is closed at framework level.|Same as in Base Component|
OMG|05|Configuration Action in Reset Procedure  (closes BAS-4)|This Adaptation Point is closed at framework level.|Release all OutComponents in the POCL; reset the POCL; reset the counter of successfully loaded OutComponents; and return 'Action Successful'|
OMG|06|Shutdown Action in Base Component of OutManager (closes BAS-5)|This Adaptation Point is closed at framework level.|Release all OutComponents in the POCL; reset the POCL|
OMG|07|Execution Procedure in Base Component of OutManager (closes BAS-6)|This Adaptation Point is closed at framework level.|Implemented as procedure of Manager Execution Procedure|
OMG|08|Operation to Report POCL of OutManager Full|Implemented by Adaptation Point C2-ERR-1.|Generate OUTMANAGER\_POCL\_FULL Error Report|
ORG|01|Maximum Number of Trackable Commands/Reports for OutRegistry|\texttt{\#DEFINE} constant in \texttt{CrFwOutRegistryUserPar.h} defines types, sub-types and range of discriminant values supported by application.|Default value is 1.|
ORG|02|Initialization Check in Initialization Procedure of OutRegistry (closes BAS-1)|This Adaptation Point is closed at framework level.|Returns 'check successful' if the maximum number of trackable commands/reports has been set to a positive integer value.|
ORG|03|Initialization Action in Initialization Procedure of OutRegistry (closes BAS-2)|This Adaptation Point is closed at framework level.|Allocate the resources for tracking the commands and reports and returns: 'action successful' if the allocation succeeds or 'action failed' if the allocation fails.|
ORG|04|Configuration Check in Reset Procedure of OutRegistry (closes BAS-3)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
ORG|05|Configuration Action in Reset Procedure of OutRegistry (closes BAS-4)|This Adaptation Point is closed at framework level.|Set the enable state for all kinds of commands and reports to: 'enabled'; clear all information about tracked commands and reports; and return: 'action successful'.|
ORG|06|Shutdown Action of OutRegistry (closes BAS-5)|This Adaptation Point is closed at framework level.|Set the enable state for all kinds of commands and reports to: 'enabled'; clear all information about tracked commands and reports.|
ORG|07|Execution Procedure of OutRegistry (closes BAS-6)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
OSR|01|Initialization Check in Initialization Procedure of OutStreamRegistry|In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OSR|02|Initialization Action in Initialization Procedure of OutStreamRegistry|In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OSR|03|Configuration Check in  Reset Procedure of OutStreamRegistry|In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation.|Returns 'check successful' if the information to set up the link between the packet destinations and the OutStreams is available.|
OSR|04|Configuration Action in Reset Procedure of OutStreamRegistry|In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation.|Set up and configure the link between the packet destinations and the OutStreams.|
OSR|05|Shutdown Action  of OutStreamRegistry (closes BAS-5)|In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OSR|06|Execution Procedure of OutStreamRegistry (closes BAS-6)|In the C2 Implementation, the OutStreamRegistry is not implemented as a separate component (it is merged with the OutStream). This adaptation point is closed in the C2 Implementation.|Same value as in Base Component|
OSR|07|Get OutStream Operation of OutStreamRegistry|\texttt{\#DEFINE} constants (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h} define the destination associated to each OutStream.|No default provided at framework level|
OST|01|Packet Queue Size for OutStream|\texttt{\#DEFINE} constant (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}|No value defined at framework level|
OST|02|Initialization Check in Initialization Procedure of OutStream|Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwCmpBase.h}. The size of the Packet Queue is a statically defined configuration parameter. The fact that it must be positive is checked by the one of the Configuration Check Functions of requirement C2-BAS-01.|Returns 'check successful' if the size of the Packet Queue has been set to a positive integer|
OST|03|Initialization Action in Initialization Procedure of OutStream|Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwOutStream.h}.|Allocate resources for the Packet Queue and return 'Action Successful'|
OST|04|Configuration Check in Initialization Procedure of OutStream|Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwCmpBase.h}.|Same value as in Base Component|
OST|05|Configuration Action in Reset Procedure of OutStream|Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwOutStream.h}.|Reset the Packet Queue and return 'Action Successful'|
OST|06|Shutdown Action of OutStream|Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Default implementation is provided in \texttt{CrFwOutStream.h}..|Reset the Packet Queue and release the memory allocated to it|
OST|07|Execution Procedure of OutStream (closes BAS-6)|This Adaptation Point is closed at framework level.|Same value as in Base Component|
OST|08|Packet Hand-Over Operation of OutStream|Function pointers (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}. Only a test stub is provided as default at framework level.|No value defined at framework level|
OST|09|Operation to set Sequence Counter in Outgoing Packets|Implemented by Adaptation Point C2-PCK-1.|No value defined at framework level|
OST|10|Operation to set Type Counter in Outgoing Packets|Implemented by Adaptation Point C2-PCK-1|No value defined at framework level|
OST|11|Type Counter Set DST\_SET|Function \texttt{CrFwOutStreamDefSetDTS} serves as a test stub which builds the DTS\_SET based on the destination identifier being equal to 1 and using all (service type, service sub-type) pairs defined in \texttt{CR\_FW\_OUTCMP\_INIT\_KIND\_DESC}.|No value defined at framework level|
OST|12|Operation to Report Packet Queue Full|Implemented by Adaptation Point C2-ERR-1.|Generate OUTSTREAM\_PQ\_FULL Error Report|
OST|13|Operation to Compute and Set a Packet's CRC|Implementation of function \texttt{CrFwComputeAndSetCrc} in interface \texttt{CrFwPckt.h}. Only a test stub is provided by default at framework level.|Set CRC to 0xFFFF|
C2-CST|01|Identifier of Host Application|\texttt{\#DEFINE} constant in \texttt{CrFwUserConstants.h}.|No value defined at framework level|
C2-CST|02|Range of Service Type, Sub-Type and Discriminants for InCommands and InReports|\texttt{\#DEFINE} constants in \texttt{CrFwUserConstants.h}|No value defined at framework level|
C2-ERR|01|Operations to Report Errors Values of Command and Report Attributes in a Packet|Implementation of \texttt{CrFwRepErr.h}. Only a test stub is provided as default at framework level.|No value defined at framework level|
C2-ICM|01|Validity Check for InCommand|Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation which verifies correctness of CRC is provided by function \texttt{CrFwInCmdDefValidityCheck}.|No value defined at framework level|
C2-IFA|01|InFactory Capacity for InReports|\texttt{\#DEFINE} constant in \texttt{CrFwInFactoryUserPar.h} defines maximum number of InReports which can be allocated by the factory.|No value defined at framework level|
C2-IFA|02|InFactory Capacity for InCommands|\texttt{\#DEFINE} constant in \texttt{CrFwInFactoryUserPar.h} defines maximum number of InCommands which can be allocated by the factory.|No value defined at framework level|
C2-IFA|03|InReport Kinds|\texttt{\#DEFINE} constants in \texttt{CrFwInFactoryUserPar.h} define the kinds of InReports supported by the application. An InReport kind is defined through its service type, command or report sub-type, and discriminant value. For each supported InReport kind, function pointers are defined implementing the InReport checks and actions.|No value defined at framework level|
C2-IFA|04|InCommand Kinds|\texttt{\#DEFINE} constants in \texttt{CrFwInFactoryUserPar.h} define the kinds of InCommands supported by the application. An InCommand kind is defined through its service type, command or report sub-type, and discriminant value. For each supported InCommand kind, function pointers are defined implementing the InCommand checks and actions.|No value defined at framework level|
C2-IMG|01|Number of InManagers in Application|\texttt{\#DEFINE} constants in \texttt{CrFwInManagerUserPar.h}|No value defined at framework level|
C2-INC|01|Operations to Report the Outcome of the Processing and Execution of an Incoming Command|Implementation of \texttt{CrFwRepInCmdOutcome.h}. Only a test stub is provided as default at framework level.|No value defined at framework level|
C2-IRP|01|Validity Check for InReport|Function pointer in \texttt{CrFwInFactoryUserPar.h}. Default implementation which verifies correctness of CRC is provided by function \texttt{CrFwInRepDefValidityCheck}.|No value defined at framework level|
C2-IST|01|Number of InStreams in the Application|\texttt{\#DEFINE} constant in \texttt{CrFwInStreamUserPar.h}|No value defined at framework level|
C2-IST|03|Source associated to InStream|\texttt{\#DEFINE} constant (one for each InStream in the application) in \texttt{CrFwInStreamUserPar.h}|No value defined at framework level|
C2-OFA|01|OutFactory Capacity|\texttt{\#DEFINE} constant in \texttt{CrFwOutFactoryUserPar.h} defines maximum number of OutComponents which can be allocated by the factory.|No value defined at framework level|
C2-OFA|02|OutComponent Kinds|\texttt{\#DEFINE} constants in \texttt{CrFwOutFactoryUserPar.h} define the kinds of OutComponents supported by the application. An OutComponent kind is defined through its service type, command or report sub-type, and discriminant value. For each supported OutComponent kind, function pointers are defined implementing the OutComponent checks and actions.|No value defined at framework level|
C2-OMG|01|Number of OutManagers in Application|\texttt{\#DEFINE} constants in \texttt{CrFwOutManagerUserPar.h}|No value defined at framework level|
C2-ORG|02|Number of Service Types/Sub-Types supported by Application|\texttt{\#DEFINE} constant in \texttt{CrFwOutRegistryUserPar.h} defines types, sub-types and range of discriminant values supported by application.|No value defined at framework level|
C2-ORG|03|Range of Services supported by Application|\texttt{\#DEFINE} constant in \texttt{CrFwOutRegistryUserPar.h} defines types, sub-types and range of discriminant values supported by application.|No value defined at framework level|
C2-OST|01|Number of OutStreams in the Application|\texttt{\#DEFINE} constant in \texttt{CrFwOutStreamUserPar.h}|No value defined at framework level|
C2-OST|03|Destination associated to OutStream|\texttt{\#DEFINE} constant (one for each OutStream in the application) in \texttt{CrFwOutStreamUserPar.h}|No value defined at framework level|
C2-PCK|01|Operations to Set and Get the Values of Command and Report Attributes in a Packet|Implementation of \texttt{CrFwPckt.h}.|No value defined at framework level|
C2-TIM|01|Operations to Get the Current Time|Implementation of \texttt{CrFwTime.h}. Only a test stub is provided as default at framework level.|No value defined at framework level|
C2-TYP|01|Definition of Primitive Types|Definition of \texttt{typedef}.values in \texttt{CrFwUserConstants.h}. Default values are pre-defined in this header file.|Reasoane values are pre-defined in \texttt{CrFwUserConstants.h}|
